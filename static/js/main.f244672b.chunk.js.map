{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","d","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","Date","getDay","getDate","getMonth","getFullYear","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAEMA,EACC,mCADDA,EAEG,2CAkEMC,MA/Df,WACE,IAesBC,EAftB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KA2BA,OACE,qBAAKC,UAAmC,oBAAhBF,EAAQG,MAAyBH,EAAQG,KAAKC,KAAO,GAAM,WAAsB,MAAzG,SACI,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACGG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIT,EAASS,EAAEC,OAAOC,QACjCA,MAAOZ,EACPa,WAnCG,SAAAC,GACG,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAIpB,EAAJ,qBAAyBI,EAAzB,+BAAqDJ,IACzDqB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WA+Ba,oBAAhBlB,EAAQG,KACnB,gCACE,sBAAKD,UAAU,eAAf,UACI,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,KAA2CrB,EAAQsB,IAAIC,WACvD,qBAAKrB,UAAU,OAAf,UA9BUN,EA8ByB,IAAI4B,KApBzC,GAPI,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/D5B,EAAE6B,UACN7B,EAAE8B,UAIS,IART,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzG9B,EAAE+B,YACV/B,EAAEgC,oBAwBR,sBAAK1B,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACG2B,KAAKC,MAAM9B,EAAQG,KAAKC,MAD3B,WAGA,qBAAKF,UAAU,UAAf,SACGF,EAAQA,QAAQ,GAAGG,aAInB,SCpDA4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.f244672b.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst api = {\n   key:\"6803895a2f0ff4ac726f8485e5a1a734\",\n   base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n   const search = evt => {\n      if(evt.key === 'Enter') {\n        fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n       });\n     }\n   }\n\n   const dateBuilder = (d) => {\n     \n     let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n     let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n     let day = days[d.getDay()];\n     let date = d.getDate();\n     let month = months[d.getMonth()];\n     let year = d.getFullYear();\n\n     return ''+day+''+date+' '+month+''+year+'';\n   } \n \n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app') : 'app'}>\n        <main>\n          <div className='search-box'>\n            <input\n               type=\"text\"\n               className=\"search-bar\"\n               placeholder=\"Search...\"\n               onChange={e => setQuery(e.target.value)}\n               value={query}\n               onKeyPress={search}\n            />\n          </div>\n          {(typeof weather.main != \"undefined\") ? (\n        <div>\n          <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n          <div className=\"weather-box\">\n            <div className=\"temp\">\n              {Math.round(weather.main.temp)}Â°c\n            </div>\n            <div className=\"weather\">\n              {weather.weather[0].main}\n            </div>\n          </div>\n       </div>\n          ) : ('')}\n        </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}